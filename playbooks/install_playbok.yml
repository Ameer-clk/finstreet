- hosts: localhost
  become: true
  tasks:
    
    - name: Install required packages for Docker
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - python-pip
        state: present
      when: ansible_pkg_mgr == 'apt'

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
      when: ansible_pkg_mgr == 'apt'

    - name: Add Docker repository for Ubuntu
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
      when: ansible_pkg_mgr == 'apt'

    - name: Install Docker
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_pkg_mgr == 'apt'

    - name: Install required packages for Docker
      package:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - python-pip
        state: present
      when: ansible_pkg_mgr == 'yum'

    - name: Add Docker repository for CentOS
      yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable - $basearch
        baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
        gpgcheck: 1
        enabled: 1
        gpgkey: https://download.docker.com/linux/centos/gpg
      when: ansible_pkg_mgr == 'yum'

    - name: Install Docker
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_pkg_mgr == 'yum'

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-{{ ansible_system|lower }}-{{ ansible_machine }} 
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'

    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create Prometheus directory
      file:
        path: /var/lib/prometheus
        state: directory

    - name: Create Grafana directory
      file:
        path: /etc/grafana
        state: directory

    - name: Create BlackBox-Exporter directory 
      file:
        path: /etc/blackbox_exporter
        state: directory    

    - name: Install Node Exporter 
      apt:
        name: prometheus-node-exporter 
        state: present    

    - name: Start Blackbox-Exporter container
      docker_container:
        name: blackbox
        image: prom/blackbox-exporter
        restart_policy: always
        ports:
          - "9115:9115"
        volumes:
          - /var/lib/prometheus-grafana/blackbox.yml:/etc/blackbox_exporter/blackbox.yml

    - name: Start Prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus
        restart_policy: always
        ports:
          - "9090:9090"
        volumes:
          - /var/lib/prometheus-grafana/prometheus.yml:/etc/prometheus/prometheus.yml

    - name: Start Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        restart_policy: always
        ports:
          - "3000:3000"
